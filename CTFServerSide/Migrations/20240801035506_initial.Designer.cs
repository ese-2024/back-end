// <auto-generated />
using CTFServerSide.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFServerSide.Migrations
{
    [DbContext(typeof(CTFContext))]
    [Migration("20240801035506_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CTFServerSide.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Level = 1,
                            Title = "Nível 1: Navegação e Comandos Básicos"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Level = 2,
                            Title = "Nível 2: Manipulação de Arquivos e Diretórios"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Level = 3,
                            Title = "Nível 3: Permissões e Processos"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Level = 4,
                            Title = "Nível 4: Ferramentas de Busca e Filtros"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Level = 5,
                            Title = "Nível 5: Arquivos e Diretórios Avançados"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Level = 6,
                            Title = "Nível 6: Redes e Segurança"
                        });
                });

            modelBuilder.Entity("CTFServerSide.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeId = 1,
                            Link = "https://www.guiafoca.org/guiaonline/iniciante/ch02s05.html",
                            Title = "Guia foca - Explicações básicas"
                        },
                        new
                        {
                            Id = 2,
                            ChallengeId = 1,
                            Link = "",
                            Title = "Comandos Básicos do Linux"
                        },
                        new
                        {
                            Id = 3,
                            ChallengeId = 2,
                            Link = "https://pt.wikibooks.org/wiki/Linux_Essencial/Li%C3%A7%C3%A3o_Manipula%C3%A7%C3%A3o_de_arquivos",
                            Title = "Manipulação de Arquivos no Linux"
                        },
                        new
                        {
                            Id = 4,
                            ChallengeId = 2,
                            Link = "https://www.alura.com.br/artigos/entendendo-as-permissoes-no-linux",
                            Title = "Entendendo Permissões no Linux"
                        },
                        new
                        {
                            Id = 5,
                            ChallengeId = 3,
                            Link = "https://www.hostinger.com.br/tutoriais/como-gerenciar-processos-no-linux-usando-linha-de-comando#:~:text=Para%20listar%20processos%20no%20Linux,processos%20por%20uso%20da%20CPU.",
                            Title = "Gerenciamento de Processos no Linux"
                        },
                        new
                        {
                            Id = 6,
                            ChallengeId = 3,
                            Link = "https://www.alura.com.br/artigos/entendendo-as-permissoes-no-linux#:~:text=No%20Linux%2C%20conseguimos%20alterar%20a,diret%C3%B3rio%20e%20dos%20demais%20usu%C3%A1rios.",
                            Title = "Manipulando Permissões e Propriedades de Arquivos"
                        },
                        new
                        {
                            Id = 7,
                            ChallengeId = 4,
                            Link = "",
                            Title = "Expressões Regulares no Linux"
                        },
                        new
                        {
                            Id = 8,
                            ChallengeId = 4,
                            Link = "",
                            Title = "Comandos de Busca e Filtros no Linux"
                        },
                        new
                        {
                            Id = 9,
                            ChallengeId = 5,
                            Link = "",
                            Title = "Manipulação Avançada de Arquivos e Diretórios"
                        },
                        new
                        {
                            Id = 10,
                            ChallengeId = 5,
                            Link = "",
                            Title = "Compressão e Descompressão no Linux"
                        },
                        new
                        {
                            Id = 11,
                            ChallengeId = 6,
                            Link = "",
                            Title = "Configuração de Rede no Linux"
                        },
                        new
                        {
                            Id = 12,
                            ChallengeId = 6,
                            Link = "",
                            Title = "Monitoramento de Rede no Linux"
                        },
                        new
                        {
                            Id = 13,
                            ChallengeId = 6,
                            Link = "",
                            Title = "Configuração de Firewall com iptables"
                        });
                });

            modelBuilder.Entity("CTFServerSide.Models.NecessaryKnowledge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Knowledge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("NecessaryKnowledges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeId = 1,
                            Knowledge = "Navegação no sistema de arquivos"
                        },
                        new
                        {
                            Id = 2,
                            ChallengeId = 1,
                            Knowledge = "Listagem de diretórios e arquivos"
                        },
                        new
                        {
                            Id = 3,
                            ChallengeId = 1,
                            Knowledge = "Exibição do conteúdo de arquivos"
                        },
                        new
                        {
                            Id = 4,
                            ChallengeId = 1,
                            Knowledge = "Manual de comandos"
                        },
                        new
                        {
                            Id = 5,
                            ChallengeId = 2,
                            Knowledge = "Criação, cópia, movimentação e remoção de arquivos e diretórios"
                        },
                        new
                        {
                            Id = 6,
                            ChallengeId = 2,
                            Knowledge = "Conhecimento de caminhos absolutos e relativos"
                        },
                        new
                        {
                            Id = 7,
                            ChallengeId = 2,
                            Knowledge = "Permissões básicas de arquivos"
                        },
                        new
                        {
                            Id = 8,
                            ChallengeId = 3,
                            Knowledge = "Modificação de permissões e propriedades de arquivos"
                        },
                        new
                        {
                            Id = 9,
                            ChallengeId = 3,
                            Knowledge = "Gerenciamento básico de processos"
                        },
                        new
                        {
                            Id = 10,
                            ChallengeId = 3,
                            Knowledge = "Visualização de processos em execução"
                        },
                        new
                        {
                            Id = 11,
                            ChallengeId = 4,
                            Knowledge = "Uso de comandos de busca e filtros"
                        },
                        new
                        {
                            Id = 12,
                            ChallengeId = 4,
                            Knowledge = "Entendimento de expressões regulares básicas"
                        },
                        new
                        {
                            Id = 13,
                            ChallengeId = 4,
                            Knowledge = "Manipulação de fluxo de dados entre comandos"
                        },
                        new
                        {
                            Id = 14,
                            ChallengeId = 5,
                            Knowledge = "Manipulação avançada de arquivos e diretórios"
                        },
                        new
                        {
                            Id = 15,
                            ChallengeId = 5,
                            Knowledge = "Compressão e descompressão de arquivos"
                        },
                        new
                        {
                            Id = 16,
                            ChallengeId = 5,
                            Knowledge = "Montagem e desmontagem de sistemas de arquivos"
                        },
                        new
                        {
                            Id = 17,
                            ChallengeId = 6,
                            Knowledge = "Configuração básica de rede"
                        },
                        new
                        {
                            Id = 18,
                            ChallengeId = 6,
                            Knowledge = "Ferramentas de monitoramento de rede"
                        },
                        new
                        {
                            Id = 19,
                            ChallengeId = 6,
                            Knowledge = "Configurações de firewall"
                        },
                        new
                        {
                            Id = 20,
                            ChallengeId = 6,
                            Knowledge = "Noções de segurança e criptografia"
                        });
                });

            modelBuilder.Entity("CTFServerSide.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Quests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeId = 1,
                            Description = "Ana está no diretório /home/ana e precisa listar todos os arquivos e diretórios que estão nesse local para encontrar um arquivo chamado 'instrucoes.txt'.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Explorador de Diretórios"
                        },
                        new
                        {
                            Id = 2,
                            ChallengeId = 1,
                            Description = "Carlos encontrou um arquivo chamado 'mensagem.txt' no diretório atual. Ele precisa ler o conteúdo desse arquivo para encontrar uma pista.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Leitura de Arquivo"
                        },
                        new
                        {
                            Id = 3,
                            ChallengeId = 1,
                            Description = "Beatriz precisa usar o comando cp para copiar um arquivo, mas ela não sabe como usá-lo corretamente. Ela decide consultar o manual do comando.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Manual de Comandos"
                        },
                        new
                        {
                            Id = 4,
                            ChallengeId = 1,
                            Description = "Eduardo está navegando pelo sistema de arquivos e quer saber em qual diretório ele está atualmente.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Caminho Atual"
                        },
                        new
                        {
                            Id = 5,
                            ChallengeId = 1,
                            Description = "Fernanda precisa entrar no diretório 'documentos' que está localizado dentro de seu diretório pessoal.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Movendo-se pelos Diretórios"
                        },
                        new
                        {
                            Id = 6,
                            ChallengeId = 2,
                            Description = "Guilherme precisa criar um arquivo chamado 'novo_arquivo.txt' no diretório atual.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Criando um Arquivo"
                        },
                        new
                        {
                            Id = 7,
                            ChallengeId = 2,
                            Description = "Helena precisa fazer uma cópia do arquivo 'documento.txt' e chamá-la de 'documento_backup.txt'.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Copiando um Arquivo"
                        },
                        new
                        {
                            Id = 8,
                            ChallengeId = 2,
                            Description = "Isabel quer mover o arquivo 'relatorio.txt' para o diretório 'relatorios'.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Movendo um Arquivo"
                        },
                        new
                        {
                            Id = 9,
                            ChallengeId = 2,
                            Description = "João precisa deletar o arquivo 'temp.txt' que está no diretório atual.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Removendo um Arquivo"
                        },
                        new
                        {
                            Id = 10,
                            ChallengeId = 2,
                            Description = "Karina precisa criar um diretório chamado 'projetos' em seu diretório pessoal.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Criando um Diretório"
                        },
                        new
                        {
                            Id = 11,
                            ChallengeId = 3,
                            Description = "Leonardo precisa dar permissão de leitura, escrita e execução ao dono do arquivo 'script.sh'.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Alterando Permissões"
                        },
                        new
                        {
                            Id = 12,
                            ChallengeId = 3,
                            Description = "Mariana precisa mudar o dono do arquivo 'dados.txt' para o usuário 'pedro'.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Mudando o Dono do Arquivo"
                        },
                        new
                        {
                            Id = 13,
                            ChallengeId = 3,
                            Description = "Nicolas quer ver uma lista de todos os processos que estão sendo executados no sistema.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Visualizando Processos em Execução"
                        },
                        new
                        {
                            Id = 14,
                            ChallengeId = 3,
                            Description = "Olivia identificou que um processo está travando o sistema e precisa encerrá-lo. O PID do processo é 1234.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Matando um Processo"
                        },
                        new
                        {
                            Id = 15,
                            ChallengeId = 3,
                            Description = "Pedro quer executar o comando backup.sh em segundo plano.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Executando um Comando em Background"
                        },
                        new
                        {
                            Id = 16,
                            ChallengeId = 4,
                            Description = "Ricardo precisa encontrar um arquivo chamado 'config.txt' em seu diretório pessoal.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Buscando por Arquivos"
                        },
                        new
                        {
                            Id = 17,
                            ChallengeId = 4,
                            Description = "Sabrina quer encontrar todas as ocorrências da palavra 'erro' no arquivo 'log.txt'.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Buscando Texto em Arquivos"
                        },
                        new
                        {
                            Id = 18,
                            ChallengeId = 4,
                            Description = "Thiago precisa saber quantas linhas o arquivo 'dados.csv' possui.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Contando Linhas de um Arquivo"
                        },
                        new
                        {
                            Id = 19,
                            ChallengeId = 4,
                            Description = "Vanessa quer ordenar as linhas do arquivo 'nomes.txt' em ordem alfabética.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Ordenando Linhas de um Arquivo"
                        },
                        new
                        {
                            Id = 20,
                            ChallengeId = 4,
                            Description = "Wagner precisa remover as linhas duplicadas do arquivo 'lista.txt'.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Eliminando Linhas Duplicadas"
                        },
                        new
                        {
                            Id = 21,
                            ChallengeId = 5,
                            Description = "Xuxa precisa criar um arquivo compactado chamado 'backup.tar.gz' a partir do diretório 'projetos'.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Compactando Arquivos"
                        },
                        new
                        {
                            Id = 22,
                            ChallengeId = 5,
                            Description = "Yuri recebeu um arquivo chamado 'dados.tar.gz' e precisa extrair seu conteúdo.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Descompactando Arquivos"
                        },
                        new
                        {
                            Id = 23,
                            ChallengeId = 5,
                            Description = "Zara precisa montar o sistema de arquivos localizado em '/dev/sdb1' no diretório '/mnt/usb'.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Montando um Sistema de Arquivos"
                        },
                        new
                        {
                            Id = 24,
                            ChallengeId = 5,
                            Description = "Amanda terminou de usar o sistema de arquivos montado em '/mnt/usb' e precisa desmontá-lo.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Desmontando um Sistema de Arquivos"
                        },
                        new
                        {
                            Id = 25,
                            ChallengeId = 5,
                            Description = "Bruno precisa mudar o dono do diretório 'projetos' e de todos os arquivos e subdiretórios para o usuário 'juliana'.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Alterando o Dono de um Diretório Recursivamente"
                        },
                        new
                        {
                            Id = 26,
                            ChallengeId = 6,
                            Description = "Carlos quer verificar as conexões de rede ativas em seu sistema.",
                            IsCompleted = false,
                            Order = 1,
                            Title = "Verificando Conexões de Rede"
                        },
                        new
                        {
                            Id = 27,
                            ChallengeId = 6,
                            Description = "Daniela precisa verificar se consegue se conectar ao servidor 'example.com'.",
                            IsCompleted = false,
                            Order = 2,
                            Title = "Pinging um Servidor"
                        },
                        new
                        {
                            Id = 28,
                            ChallengeId = 6,
                            Description = "Eduardo precisa configurar a interface de rede 'eth0' com o endereço IP '192.168.1.100'.",
                            IsCompleted = false,
                            Order = 3,
                            Title = "Configurando uma Interface de Rede"
                        },
                        new
                        {
                            Id = 29,
                            ChallengeId = 6,
                            Description = "Fernanda precisa bloquear todo o tráfego de entrada na porta 80.",
                            IsCompleted = false,
                            Order = 4,
                            Title = "Adicionando uma Regra de Firewall"
                        },
                        new
                        {
                            Id = 30,
                            ChallengeId = 6,
                            Description = "Gabriel quer monitorar o uso de rede de sua interface 'wlan0'.",
                            IsCompleted = false,
                            Order = 5,
                            Title = "Monitorando o Uso de Rede"
                        });
                });

            modelBuilder.Entity("CTFServerSide.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Command = "ls",
                            Description = "",
                            ExpectedAnswer = "ls /home/ana",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Command = "cat",
                            Description = "",
                            ExpectedAnswer = "cat mensagem.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Command = "man",
                            Description = "",
                            ExpectedAnswer = "man cp",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 3
                        },
                        new
                        {
                            Id = 4,
                            Command = "pwd",
                            Description = "",
                            ExpectedAnswer = "pwd",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 4
                        },
                        new
                        {
                            Id = 5,
                            Command = "cd",
                            Description = "",
                            ExpectedAnswer = "cd ~/documentos",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 5
                        },
                        new
                        {
                            Id = 6,
                            Command = "touch",
                            Description = "",
                            ExpectedAnswer = "touch novo_arquivo.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 6
                        },
                        new
                        {
                            Id = 7,
                            Command = "cp",
                            Description = "",
                            ExpectedAnswer = "cp documento.txt documento_backup.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 7
                        },
                        new
                        {
                            Id = 8,
                            Command = "mv",
                            Description = "",
                            ExpectedAnswer = "mv relatorio.txt relatorios/",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 8
                        },
                        new
                        {
                            Id = 9,
                            Command = "rm",
                            Description = "",
                            ExpectedAnswer = "rm temp.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 9
                        },
                        new
                        {
                            Id = 10,
                            Command = "mkdir",
                            Description = "",
                            ExpectedAnswer = "mkdir ~/projetos",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 10
                        },
                        new
                        {
                            Id = 11,
                            Command = "chmod",
                            Description = "",
                            ExpectedAnswer = "chmod u+rwx script.sh",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 11
                        },
                        new
                        {
                            Id = 12,
                            Command = "chown",
                            Description = "",
                            ExpectedAnswer = "sudo chown pedro dados.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 12
                        },
                        new
                        {
                            Id = 13,
                            Command = "ps",
                            Description = "",
                            ExpectedAnswer = "ps aux",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 13
                        },
                        new
                        {
                            Id = 14,
                            Command = "kill",
                            Description = "",
                            ExpectedAnswer = "kill 1234",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 14
                        },
                        new
                        {
                            Id = 15,
                            Command = "./backup.sh &",
                            Description = "",
                            ExpectedAnswer = "./backup.sh &",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 15
                        },
                        new
                        {
                            Id = 16,
                            Command = "find",
                            Description = "",
                            ExpectedAnswer = "find ~/ -name config.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 16
                        },
                        new
                        {
                            Id = 17,
                            Command = "grep",
                            Description = "",
                            ExpectedAnswer = "grep 'erro' log.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 17
                        },
                        new
                        {
                            Id = 18,
                            Command = "wc",
                            Description = "",
                            ExpectedAnswer = "wc -l dados.csv",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 18
                        },
                        new
                        {
                            Id = 19,
                            Command = "sort",
                            Description = "",
                            ExpectedAnswer = "sort nomes.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 19
                        },
                        new
                        {
                            Id = 20,
                            Command = "uniq",
                            Description = "",
                            ExpectedAnswer = "uniq lista.txt",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 20
                        },
                        new
                        {
                            Id = 21,
                            Command = "tar",
                            Description = "",
                            ExpectedAnswer = "tar -czvf backup.tar.gz projetos/",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 21
                        },
                        new
                        {
                            Id = 22,
                            Command = "tar",
                            Description = "",
                            ExpectedAnswer = "tar -xzvf dados.tar.gz",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 22
                        },
                        new
                        {
                            Id = 23,
                            Command = "mount",
                            Description = "",
                            ExpectedAnswer = "sudo mount /dev/sdb1 /mnt/usb",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 23
                        },
                        new
                        {
                            Id = 24,
                            Command = "umount",
                            Description = "",
                            ExpectedAnswer = "sudo umount /mnt/usb",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 24
                        },
                        new
                        {
                            Id = 25,
                            Command = "chown",
                            Description = "",
                            ExpectedAnswer = "sudo chown -R juliana projetos/",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 25
                        },
                        new
                        {
                            Id = 26,
                            Command = "netstat",
                            Description = "",
                            ExpectedAnswer = "netstat -tuln",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 26
                        },
                        new
                        {
                            Id = 27,
                            Command = "ping",
                            Description = "",
                            ExpectedAnswer = "ping example.com",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 27
                        },
                        new
                        {
                            Id = 28,
                            Command = "ifconfig",
                            Description = "",
                            ExpectedAnswer = "sudo ifconfig eth0 192.168.1.100",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 28
                        },
                        new
                        {
                            Id = 29,
                            Command = "iptables",
                            Description = "",
                            ExpectedAnswer = "sudo iptables -A INPUT -p tcp --dport 80 -j DROP",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 29
                        },
                        new
                        {
                            Id = 30,
                            Command = "iftop",
                            Description = "",
                            ExpectedAnswer = "sudo iftop -i wlan0",
                            IsCompleted = false,
                            Order = 1,
                            QuestId = 30
                        });
                });

            modelBuilder.Entity("CTFServerSide.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserChallenge", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ChallengeId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("UserChallenges");
                });

            modelBuilder.Entity("UserQuest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("UserQuests");
                });

            modelBuilder.Entity("CTFServerSide.Models.Material", b =>
                {
                    b.HasOne("CTFServerSide.Models.Challenge", "Challenge")
                        .WithMany("Materials")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFServerSide.Models.NecessaryKnowledge", b =>
                {
                    b.HasOne("CTFServerSide.Models.Challenge", "Challenge")
                        .WithMany("NecessaryKnowledges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFServerSide.Models.Quest", b =>
                {
                    b.HasOne("CTFServerSide.Models.Challenge", "Challenge")
                        .WithMany("Quests")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFServerSide.Models.Step", b =>
                {
                    b.HasOne("CTFServerSide.Models.Quest", "Quest")
                        .WithMany("Steps")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("UserChallenge", b =>
                {
                    b.HasOne("CTFServerSide.Models.Challenge", "Challenge")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFServerSide.Models.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserQuest", b =>
                {
                    b.HasOne("CTFServerSide.Models.Quest", "Quest")
                        .WithMany("UserQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFServerSide.Models.User", "User")
                        .WithMany("UserQuests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTFServerSide.Models.Challenge", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("NecessaryKnowledges");

                    b.Navigation("Quests");

                    b.Navigation("UserChallenges");
                });

            modelBuilder.Entity("CTFServerSide.Models.Quest", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("UserQuests");
                });

            modelBuilder.Entity("CTFServerSide.Models.User", b =>
                {
                    b.Navigation("UserChallenges");

                    b.Navigation("UserQuests");
                });
#pragma warning restore 612, 618
        }
    }
}
